class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        // Step 1: Build adjacency list
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            adj.add(new ArrayList<>());
        }
        for (int[] pair : prerequisites) {
            adj.get(pair[1]).add(pair[0]); // edge: prereq â†’ course
        }

        // Step 2: Set up visited and result stack
        int[] vis = new int[numCourses];      // 0 = unvisited, 1 = visited, 2 = in recursion stack
        Stack<Integer> stack = new Stack<>();

        // Step 3: DFS to perform topological sort
        for (int i = 0; i < numCourses; i++) {
            if (vis[i] == 0) {
                if (dfs(i, adj, vis, stack)) {
                    return new int[0]; // Cycle detected
                }
            }
        }

        // Step 4: Build result from stack
        int[] order = new int[numCourses];
        int index = 0;
        while (!stack.isEmpty()) {
            order[index++] = stack.pop();
        }
        return order;
    }

    private boolean dfs(int node, List<List<Integer>> adj, int[] vis, Stack<Integer> stack) {
        vis[node] = 2; // Mark as in recursion stack

        for (int neighbor : adj.get(node)) {
            if (vis[neighbor] == 0) {
                if (dfs(neighbor, adj, vis, stack)) return true;
            } else if (vis[neighbor] == 2) {
                return true; // Cycle detected
            }
        }

        vis[node] = 1; // Mark as visited
        stack.push(node);
        return false;
    }
}
