class Solution {     
    private static int find_max(int[] piles) {         
        int maxi = Integer.MIN_VALUE;         
        int n = piles.length;         
        for (int i = 0; i < n; i++) {            
            maxi = Math.max(maxi, piles[i]);         
        }         
        return maxi;     
    }      

    private static int calculate_total_hour(int[] piles, int k) {         
        int total_hr = 0;         
        int n = piles.length;         
        for (int i = 0; i < n; i++) {             
            total_hr += Math.ceil((double) piles[i] / (double) k);         
        }         
        return total_hr;     
    }     

    public int minEatingSpeed(int[] piles, int h) {          
        int low = 1;          
        int high = find_max(piles);           
        
        while (low < high) {             
            int mid = low + (high - low) / 2;             
            int total_h = calculate_total_hour(piles, mid);             
            if (total_h <= h) {                 
                high = mid;  
            } else {                 
                low = mid + 1;             
            }         
        }          
        return low;      
    } 
}
