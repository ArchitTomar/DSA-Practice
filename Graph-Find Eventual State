class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int V = graph.length;
        
        // Step 1: Reverse the graph
        List<List<Integer>> adjRev = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            adjRev.add(new ArrayList<>());
        }

        int[] indegree = new int[V];
        for (int u = 0; u < V; u++) {
            for (int v : graph[u]) {
                adjRev.get(v).add(u);  // reverse edge
                indegree[u]++;         // original indegree
            }
        }

        // Step 2: BFS on reversed graph (Kahnâ€™s Algorithm)
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < V; i++) {
            if (indegree[i] == 0) q.offer(i);
        }

        List<Integer> safeNodes = new ArrayList<>();
        while (!q.isEmpty()) {
            int node = q.poll();
            safeNodes.add(node);
            for (int neighbor : adjRev.get(node)) {
                indegree[neighbor]--;
                if (indegree[neighbor] == 0) q.offer(neighbor);
            }
        }

        // Step 3: Sort result as required
        Collections.sort(safeNodes);
        return safeNodes;
    }
}
