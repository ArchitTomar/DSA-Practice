import java.util.*;

class Solution {
    public int countPaths(int n, int[][] roads) {
        ArrayList<ArrayList<Edge>> adj = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
        }

        for (int[] r : roads) {
            adj.get(r[0]).add(new Edge(r[1], r[2]));
            adj.get(r[1]).add(new Edge(r[0], r[2]));
        }

        long[] dist = new long[n];
        int[] ways = new int[n];
        Arrays.fill(dist, Long.MAX_VALUE);
        dist[0] = 0;
        ways[0] = 1;

        PriorityQueue<Pair> pq = new PriorityQueue<>(Comparator.comparingLong(a -> a.dist));
        pq.add(new Pair(0, 0));

        int mod = (int) (1e9 + 7);

        while (!pq.isEmpty()) {
            Pair p = pq.poll();
            long d = p.dist;
            int node = p.node;

            if (d > dist[node]) continue;

            for (Edge edge : adj.get(node)) {
                int adjNode = edge.node;
                int weight = edge.weight;

                if (d + weight < dist[adjNode]) {
                    dist[adjNode] = d + weight;
                    pq.add(new Pair(dist[adjNode], adjNode));
                    ways[adjNode] = ways[node];
                } else if (d + weight == dist[adjNode]) {
                    ways[adjNode] = (ways[adjNode] + ways[node]) % mod;
                }
            }
        }

        return ways[n - 1];
    }
}

class Pair {
    long dist;
    int node;

    public Pair(long dist, int node) {
        this.dist = dist;
        this.node = node;
    }
}

class Edge {
    int node;
    int weight;

    public Edge(int node, int weight) {
        this.node = node;
        this.weight = weight;
    }
}
