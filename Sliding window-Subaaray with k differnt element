import java.util.*;

class Solution {
    public int subarraysWithKDistinct(int[] nums, int k) {
        return atMost(nums, k) - atMost(nums, k - 1);
    }

    private int atMost(int[] nums, int k) {
        Map<Integer, Integer> freq = new HashMap<>();
        int l = 0, count = 0;

        for (int r = 0; r < nums.length; r++) {
            // Add nums[r] into window
            freq.put(nums[r], freq.getOrDefault(nums[r], 0) + 1);

            // Shrink window if more than k distinct
            while (freq.size() > k) {
                freq.put(nums[l], freq.get(nums[l]) - 1);
                if (freq.get(nums[l]) == 0) {
                    freq.remove(nums[l]);
                }
                l++;
            }

            // Count subarrays ending at r
            count += (r - l + 1);
        }

        return count;
    }
}
