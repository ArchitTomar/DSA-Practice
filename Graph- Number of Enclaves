import java.util.*;

class Solution {
    public int numEnclaves(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int[][] vis = new int[n][m];
        Queue<int[]> q = new LinkedList<>();

        // Traverse the boundary and mark reachable land
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                // Check for boundary land cell
                if ((i == 0 || j == 0 || i == n - 1 || j == m - 1) && grid[i][j] == 1) {
                    q.add(new int[]{i, j});
                    vis[i][j] = 1;
                }
            }
        }

        int[] delRow = {-1, 0, 1, 0};
        int[] delCol = {0, 1, 0, -1};

        // Multi-source BFS from boundary land cells
        while (!q.isEmpty()) {
            int[] cell = q.poll();
            int row = cell[0], col = cell[1];

            for (int i = 0; i < 4; i++) {
                int nRow = row + delRow[i];
                int nCol = col + delCol[i];

                if (nRow >= 0 && nRow < n && nCol >= 0 && nCol < m &&
                        grid[nRow][nCol] == 1 && vis[nRow][nCol] == 0) {
                    q.add(new int[]{nRow, nCol});
                    vis[nRow][nCol] = 1;
                }
            }
        }

        // Count unvisited land cells (enclaves)
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 1 && vis[i][j] == 0) {
                    cnt++;
                }
            }
        }

        return cnt;
    }
}
