import java.util.*;

class Solution {

    class Tuple {
        int distance, row, col;
        Tuple(int distance, int row, int col) {
            this.distance = distance;
            this.row = row;
            this.col = col;
        }
    }

    public int shortestPathBinaryMatrix(int[][] grid) {
        int n = grid.length;

        // Edge case: if start or end is blocked
        if (grid[0][0] != 0 || grid[n - 1][n - 1] != 0) return -1;

        int[][] dist = new int[n][n];
        for (int[] row : dist) Arrays.fill(row, (int) 1e9);
        dist[0][0] = 1;

        Queue<Tuple> q = new LinkedList<>();
        q.add(new Tuple(1, 0, 0)); // distance, row, col

        // 8 possible directions (up, down, left, right, and 4 diagonals)
        int[] dr = {-1, -1, -1, 0, 1, 1, 1, 0};
        int[] dc = {-1, 0, 1, 1, 1, 0, -1, -1};

        while (!q.isEmpty()) {
            Tuple curr = q.poll();
            int dis = curr.distance;
            int r = curr.row;
            int c = curr.col;

            // If destination is reached
            if (r == n - 1 && c == n - 1) return dis;

            for (int i = 0; i < 8; i++) {
                int newR = r + dr[i];
                int newC = c + dc[i];

                // Check boundaries and if the cell is not blocked
                if (newR >= 0 && newR < n && newC >= 0 && newC < n &&
                        grid[newR][newC] == 0 && dis + 1 < dist[newR][newC]) {
                    dist[newR][newC] = dis + 1;
                    q.add(new Tuple(dis + 1, newR, newC));
                }
            }
        }

        // No path found
        return -1;
    }
}
