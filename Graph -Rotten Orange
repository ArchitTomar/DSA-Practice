import java.util.*;

class Solution {
    public int orangesRotting(int[][] grid) {
        if (grid == null || grid.length == 0) return 0;
        
        int rows = grid.length;
        int cols = grid[0].length;
        Queue<int[]> queue = new LinkedList<>();
        int count_fresh = 0;

        // Step 1: Sabhi rotten oranges ko queue mein daalo aur fresh oranges count karo
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (grid[i][j] == 2) {
                    queue.offer(new int[]{i, j}); // rotten orange
                }
                if (grid[i][j] != 0) {
                    count_fresh++; // fresh or rotten dono count ho rahe hain
                }
            }
        }

        if (count_fresh == 0) return 0; // koi orange hi nahi hai

        int countMin = 0, cnt = 0;
        int[] dx = {0, 0, 1, -1};
        int[] dy = {1, -1, 0, 0};

        // Step 2: BFS traversal
        while (!queue.isEmpty()) {
            int size = queue.size();
            cnt += size;

            for (int i = 0; i < size; i++) {
                int[] point = queue.poll();

                for (int j = 0; j < 4; j++) {
                    int x = point[0] + dx[j];
                    int y = point[1] + dy[j];

                    // Invalid condition check
                    if (x < 0 || y < 0 || x >= rows || y >= cols || grid[x][y] == 0 || grid[x][y] == 2)
                        continue;

                    // Fresh orange ko rotten bana do
                    grid[x][y] = 2;
                    queue.offer(new int[]{x, y});
                }
            }

            if (!queue.isEmpty()) {
                countMin++; // ek minute beet gaya
            }
        }

        return count_fresh == cnt ? countMin : -1;
    }
}
