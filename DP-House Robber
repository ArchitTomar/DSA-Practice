class Solution {
    public int rob(int[] nums) {
        int n = nums.length;

        // Base cases
        if (n == 0) return 0;
        if (n == 1) return nums[0];

        // Initialization for first two houses
        int prev2 = nums[0];          // rob house 0
        int prev1 = Math.max(nums[0], nums[1]); // max of house 0 or 1

        for (int i = 2; i < n; i++) {
            int pick = nums[i] + prev2;  // rob current + value two steps back
            int nonPick = prev1;         // skip current, take previous max

            int curr = Math.max(pick, nonPick); // max at current house

            // Shift for next iteration
            prev2 = prev1;
            prev1 = curr;
        }

        return prev1; // This holds the max loot
    }
}
