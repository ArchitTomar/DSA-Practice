import java.util.*;

class Solution {
    public int countPaths(int n, int[][] roads) {
        // Creating an adjacency list for the given graph.
        ArrayList<ArrayList<Pair>> adj = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
        }
        int m = roads.length;
        for (int i = 0; i < m; i++) {
            int u = roads[i][0];
            int v = roads[i][1];
            int w = roads[i][2];
            adj.get(u).add(new Pair(v, w));
            adj.get(v).add(new Pair(u, w));
        }

        // Min-heap priority queue for Dijkstra
        PriorityQueue<Pair> pq = new PriorityQueue<>((a, b) -> Integer.compare(a.first, b.first));

        int[] dist = new int[n];
        int[] ways = new int[n];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[0] = 0;
        ways[0] = 1;

        pq.add(new Pair(0, 0));

        int mod = (int)(1e9 + 7);

        while (!pq.isEmpty()) {
            Pair p = pq.poll();
            int d = p.first;
            int node = p.second;

            if (d > dist[node]) continue;

            for (Pair neighbor : adj.get(node)) {
                int adjNode = neighbor.first;
                int weight = neighbor.second;

                if (d + weight < dist[adjNode]) {
                    dist[adjNode] = d + weight;
                    pq.add(new Pair(dist[adjNode], adjNode));
                    ways[adjNode] = ways[node];
                } else if (d + weight == dist[adjNode]) {
                    ways[adjNode] = (ways[adjNode] + ways[node]) % mod;
                }
            }
        }

        return ways[n - 1];
    }
}

class Pair {
    int first;
    int second;
    public Pair(int first, int second) {
        this.first = first;
        this.second = second;
    }
}
