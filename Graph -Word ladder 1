class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String> wordSet = new HashSet<>(wordList);
        if (!wordSet.contains(endWord)) return 0;

        Queue<Pair> queue = new LinkedList<>();
        queue.add(new Pair(beginWord, 1));
        wordSet.remove(beginWord);

        while (!queue.isEmpty()) {
            Pair current = queue.poll();
            String word = current.word;
            int steps = current.steps;

            if (word.equals(endWord)) return steps;

            for (int i = 0; i < word.length(); i++) {
                char[] wordChars = word.toCharArray();

                for (char ch = 'a'; ch <= 'z'; ch++) {
                    char originalChar = wordChars[i];
                    wordChars[i] = ch;
                    String transformedWord = new String(wordChars);

                    if (wordSet.contains(transformedWord)) {
                        queue.add(new Pair(transformedWord, steps + 1));
                        wordSet.remove(transformedWord);
                    }

                    wordChars[i] = originalChar; // backtrack
                }
            }
        }

        return 0;
    }

    class Pair {
        String word;
        int steps;

        Pair(String word, int steps) {
            this.word = word;
            this.steps = steps;
        }
    }
}
