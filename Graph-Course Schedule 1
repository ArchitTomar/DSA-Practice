class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        // Step 1: Build the adjacency list
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            adj.add(new ArrayList<>());
        }
        for (int[] pair : prerequisites) {
            adj.get(pair[1]).add(pair[0]); // edge: prereq → course
        }

        // Step 2: Prepare visited arrays
        int[] vis = new int[numCourses];      // 0 = unvisited, 1 = visited
        int[] pathVis = new int[numCourses];  // 1 = currently in path

        // Step 3: Check each course for cycles
        for (int i = 0; i < numCourses; i++) {
            if (vis[i] == 0) {
                if (dfs(i, adj, vis, pathVis)) return false; // cycle detected
            }
        }

        return true; // no cycle
    }

    private boolean dfs(int node, List<List<Integer>> adj, int[] vis, int[] pathVis) {
        vis[node] = 1;
        pathVis[node] = 1;

        for (int neighbor : adj.get(node)) {
            if (vis[neighbor] == 0) {
                if (dfs(neighbor, adj, vis, pathVis)) return true;
            } else if (pathVis[neighbor] == 1) {
                return true; // back edge → cycle
            }
        }

        pathVis[node] = 0; // backtrack
        return false;
    }
}
